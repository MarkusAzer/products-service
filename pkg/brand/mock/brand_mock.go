// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package brandMock is a generated GoMock package.
package brandMock

import (
	entity "github.com/MarkusAzer/products-service/pkg/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockmessagesReader is a mock of messagesReader interface
type MockmessagesReader struct {
	ctrl     *gomock.Controller
	recorder *MockmessagesReaderMockRecorder
}

// MockmessagesReaderMockRecorder is the mock recorder for MockmessagesReader
type MockmessagesReaderMockRecorder struct {
	mock *MockmessagesReader
}

// NewMockmessagesReader creates a new mock instance
func NewMockmessagesReader(ctrl *gomock.Controller) *MockmessagesReader {
	mock := &MockmessagesReader{ctrl: ctrl}
	mock.recorder = &MockmessagesReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmessagesReader) EXPECT() *MockmessagesReaderMockRecorder {
	return m.recorder
}

// GetMessages mocks base method
func (m *MockmessagesReader) GetMessages() <-chan entity.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].(<-chan entity.Message)
	return ret0
}

// GetMessages indicates an expected call of GetMessages
func (mr *MockmessagesReaderMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockmessagesReader)(nil).GetMessages))
}

// MockMessagesRepository is a mock of MessagesRepository interface
type MockMessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesRepositoryMockRecorder
}

// MockMessagesRepositoryMockRecorder is the mock recorder for MockMessagesRepository
type MockMessagesRepositoryMockRecorder struct {
	mock *MockMessagesRepository
}

// NewMockMessagesRepository creates a new mock instance
func NewMockMessagesRepository(ctrl *gomock.Controller) *MockMessagesRepository {
	mock := &MockMessagesRepository{ctrl: ctrl}
	mock.recorder = &MockMessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagesRepository) EXPECT() *MockMessagesRepositoryMockRecorder {
	return m.recorder
}

// GetMessages mocks base method
func (m *MockMessagesRepository) GetMessages() <-chan entity.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].(<-chan entity.Message)
	return ret0
}

// GetMessages indicates an expected call of GetMessages
func (mr *MockMessagesRepositoryMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessagesRepository)(nil).GetMessages))
}

// MockstoreReader is a mock of storeReader interface
type MockstoreReader struct {
	ctrl     *gomock.Controller
	recorder *MockstoreReaderMockRecorder
}

// MockstoreReaderMockRecorder is the mock recorder for MockstoreReader
type MockstoreReaderMockRecorder struct {
	mock *MockstoreReader
}

// NewMockstoreReader creates a new mock instance
func NewMockstoreReader(ctrl *gomock.Controller) *MockstoreReader {
	mock := &MockstoreReader{ctrl: ctrl}
	mock.recorder = &MockstoreReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstoreReader) EXPECT() *MockstoreReaderMockRecorder {
	return m.recorder
}

// FindOneByID mocks base method
func (m *MockstoreReader) FindOneByID(id entity.ID) (entity.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", id)
	ret0, _ := ret[0].(entity.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID
func (mr *MockstoreReaderMockRecorder) FindOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockstoreReader)(nil).FindOneByID), id)
}

// FindOneByName mocks base method
func (m *MockstoreReader) FindOneByName(name string) (entity.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", name)
	ret0, _ := ret[0].(entity.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName
func (mr *MockstoreReaderMockRecorder) FindOneByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockstoreReader)(nil).FindOneByName), name)
}

// MockstoreWriter is a mock of storeWriter interface
type MockstoreWriter struct {
	ctrl     *gomock.Controller
	recorder *MockstoreWriterMockRecorder
}

// MockstoreWriterMockRecorder is the mock recorder for MockstoreWriter
type MockstoreWriterMockRecorder struct {
	mock *MockstoreWriter
}

// NewMockstoreWriter creates a new mock instance
func NewMockstoreWriter(ctrl *gomock.Controller) *MockstoreWriter {
	mock := &MockstoreWriter{ctrl: ctrl}
	mock.recorder = &MockstoreWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstoreWriter) EXPECT() *MockstoreWriterMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockstoreWriter) Create(b *entity.Brand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", b)
}

// Create indicates an expected call of Create
func (mr *MockstoreWriterMockRecorder) Create(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockstoreWriter)(nil).Create), b)
}

// UpdateOne mocks base method
func (m *MockstoreWriter) UpdateOne(id entity.ID, b *entity.Brand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOne", id, b)
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockstoreWriterMockRecorder) UpdateOne(id, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockstoreWriter)(nil).UpdateOne), id, b)
}

// DeleteOne mocks base method
func (m *MockstoreWriter) DeleteOne(id entity.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOne", id)
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockstoreWriterMockRecorder) DeleteOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockstoreWriter)(nil).DeleteOne), id)
}

// MockStoreRepository is a mock of StoreRepository interface
type MockStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRepositoryMockRecorder
}

// MockStoreRepositoryMockRecorder is the mock recorder for MockStoreRepository
type MockStoreRepositoryMockRecorder struct {
	mock *MockStoreRepository
}

// NewMockStoreRepository creates a new mock instance
func NewMockStoreRepository(ctrl *gomock.Controller) *MockStoreRepository {
	mock := &MockStoreRepository{ctrl: ctrl}
	mock.recorder = &MockStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreRepository) EXPECT() *MockStoreRepositoryMockRecorder {
	return m.recorder
}

// FindOneByID mocks base method
func (m *MockStoreRepository) FindOneByID(id entity.ID) (entity.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", id)
	ret0, _ := ret[0].(entity.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID
func (mr *MockStoreRepositoryMockRecorder) FindOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockStoreRepository)(nil).FindOneByID), id)
}

// FindOneByName mocks base method
func (m *MockStoreRepository) FindOneByName(name string) (entity.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", name)
	ret0, _ := ret[0].(entity.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName
func (mr *MockStoreRepositoryMockRecorder) FindOneByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockStoreRepository)(nil).FindOneByName), name)
}

// Create mocks base method
func (m *MockStoreRepository) Create(b *entity.Brand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", b)
}

// Create indicates an expected call of Create
func (mr *MockStoreRepositoryMockRecorder) Create(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStoreRepository)(nil).Create), b)
}

// UpdateOne mocks base method
func (m *MockStoreRepository) UpdateOne(id entity.ID, b *entity.Brand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOne", id, b)
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockStoreRepositoryMockRecorder) UpdateOne(id, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockStoreRepository)(nil).UpdateOne), id, b)
}

// DeleteOne mocks base method
func (m *MockStoreRepository) DeleteOne(id entity.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOne", id)
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockStoreRepositoryMockRecorder) DeleteOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockStoreRepository)(nil).DeleteOne), id)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// FindOneByID mocks base method
func (m *MockUseCase) FindOneByID(id entity.ID) (entity.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", id)
	ret0, _ := ret[0].(entity.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID
func (mr *MockUseCaseMockRecorder) FindOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockUseCase)(nil).FindOneByID), id)
}

// FindOneByName mocks base method
func (m *MockUseCase) FindOneByName(name string) (entity.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", name)
	ret0, _ := ret[0].(entity.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName
func (mr *MockUseCaseMockRecorder) FindOneByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockUseCase)(nil).FindOneByName), name)
}

// Create mocks base method
func (m *MockUseCase) Create(b *entity.Brand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", b)
}

// Create indicates an expected call of Create
func (mr *MockUseCaseMockRecorder) Create(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), b)
}

// UpdateOne mocks base method
func (m *MockUseCase) UpdateOne(id entity.ID, b *entity.Brand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOne", id, b)
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockUseCaseMockRecorder) UpdateOne(id, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockUseCase)(nil).UpdateOne), id, b)
}

// DeleteOne mocks base method
func (m *MockUseCase) DeleteOne(id entity.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOne", id)
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockUseCaseMockRecorder) DeleteOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockUseCase)(nil).DeleteOne), id)
}
